#! /usr/bin/env bash

# DESCRIPTION
#   This script is intended to invoke by i3.
#   It uses dunstify to notify the change of
#   volume and pulseaudio's pactl to configure
#   the volumes. For an alsa mixer version
#   refer to the original script, provided in
#   the Arch Linux Wiki:
#
#     https://wiki.archlinux.org/title/Dunst#Using_dunstify_as_volume/brightness_level_indicator
#
# USAGE
#   chvol [OPTIONS] [--] <VOLUME>

print_help() {
    echo "Usage: chvol [--source] [--] <VOLUME>"
    echo "       chvol [OPTIONS] [--toggle-mute]"
    echo ""
    echo "Options:"
    echo "       -h | --help:        Show this help message."
    echo "       -s | --source:      By default, the default sink device is configured, but passing this option allow to default source to be configured."
    echo "       -t | --toggle-mute: Toggle volume mute. Can be combined with the '--source' option."
    echo ""
    echo "Volume:"
    echo "       The volume can be set to absolute and relative values. When using relative values, make sure to use the special '--' option before, so that the signals (+|-) can't be interpreted as an option. Refer to the pactl manpage for more information about the volume formating"
}

change_volume() {
    # Change the volume using pulseaudio
    if [ $is_source = false ]; then
        pactl set-sink-volume @DEFAULT_SINK@ "$1"
    else
        pactl set-source-volume @DEFAULT_SOURCE@ "$1"
    fi
}

toggle_mute() {
    # Toggle volume using pulseaudio
    if [ $is_source = false ]; then
        pactl set-sink-mute @DEFAULT_SINK@ toggle
    else
        pactl set-source-mute @DEFAULT_SOURCE@ toggle
    fi
}

show_notification() {
    local msg_tag="volume"

    # Set variables depending on the device type
    if [[ $is_source == true ]]; then
        type="source"; device="@DEFAULT_SOURCE@"
        icon="audio-input-microphone-high"; muted_icon="audio-input-microphone-mutex"
        volume_text="Mic volume:"; muted_text="Mic muted"
    else 
        type="sink"; device="@DEFAULT_SINK@"
        icon="audio-volume-high"; muted_icon="audio-volumes-mutex"
        volume_text="Speaker volume:"; muted_text="Speaker muted"
    fi

    # Query pulseaudio for the current volume and whether or not the speaker is muted
    volume="$(pactl get-$type-volume $device | awk '{ print $5 }' | cut -d % -f 1)"
    mute="$(pactl get-$type-mute $device | awk '{ print $2 }')"

    if [[ $volume == 0 || "$mute" == "yes" ]]; then
        # Show the sound muted notification
        dunstify -a "changeVolume" -u low -i $muted_icon -h string:x-dunst-stack-tag:$msg_tag \
            "$muted_text" 
    else
        # Show the volume notification
        dunstify -a "changeVolume" -u low -i $icon -h string:x-dunst-stack-tag:$msg_tag \
            -h int:value:"$volume" "$volume_text ${volume}%"
    fi

    # Play the volume changed sound
    canberra-gtk-play -i audio-volume-change -d "changeVolume"
}

is_source=false
toggle=false

opts=$(getopt --options hst --longoptions help,source,toggle-mute -- "$@")

# Terminates program if getopt reports an error
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$opts"

while true; do
    case "$1" in
        -h | --help        ) print_help;     exit 0 ;;
        -s | --source      ) is_source=true; shift ;;
        -t | --toggle-mute ) toggle=true;    shift ;;
        --                 ) shift ; break ;;
        *                  ) break ;;
    esac
done

[[ $toggle == true ]] && toggle_mute || change_volume $1
show_notification
