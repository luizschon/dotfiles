#! /usr/bin/env python3

# Script that controls some eww variables related to the music/video status in 
# the top bar and the notification panel. This script tries it best to overcome 
# the weird behaviours of the players and the limitations of the playerctl utili- ty and even after these attempts, its still a quite a bit hacky.

import os, threading, subprocess, signal, json
from subprocess import Popen
from enum import Enum

class PlayerStatus(Enum):
    Inactive = 0
    Playing  = 1
    Paused   = 2

class PlayerState:
    def __init__(self, player, status=PlayerStatus.Inactive, title=None, artist=None):
        self.player = player
        self.status = status
        self.title  = title
        self.artist = artist

    def is_playing(self):
        return self.status == PlayerStatus.Playing

    def is_active(self):
        return self.status != PlayerStatus.Inactive

    def get_thumbnail(self):
        thumbnail_uri = playerctl_get_metadata_field(self.player, "mpris:artUrl")
        thumbnail_path = None

        # The mpris:artUrl field means different things depending on the player
        if thumbnail_uri.startswith("file://"):
            # Thumbnail URI is a file (file://foo/bar)
            thumbnail_path = thumbnail_uri.removeprefix("file://")
        elif thumbnail_uri.startswith("https://"):
            thumbnail_path = "/tmp/" + thumbnail_uri.split("/")[-1]
            # Downloads thumbnail from URI into tmp folder if not done before
            if not os.path.exists(thumbnail_path):
                subprocess.run(["curl", thumbnail_uri, "-o", thumbnail_path, ">", "/dev/null"])
        else:
            print("Invalid or unsafe (HTTP) artUrl URI")

        return thumbnail_path

    def export(self):
        return {
            "player": self.player,
            "title": self.title,
            "artist": self.artist,
            "thumbnail": self.get_thumbnail(),
            "playing": self.is_playing(),
            "active": self.is_active(),
        }


class PlayerThread(threading.Thread):
    def __init__(self, player_name, *args):
        threading.Thread.__init__(self, args=args)
        self.name = player_name
        self.args = args

    # Thread task for each player. Reads continuously the output of playerctl
    # with "-F metadata" args and controls the state of the PlayerState objects
    def run(self):
        ready = self.args[0]
        print(f"Thread {self.name} started")

        # Creates command for especific player
        format_str = "{{status}} {{title}} {{artist}}"
        cmd = ["playerctl", "-p", self.name, "-F", "metadata", "-f", format_str, ">", "/dev/null"]

        self.process = Popen(cmd, stdout=subprocess.PIPE, universal_newlines=True)

        if self.process == None:
            return

        for _ in self.process.stdout:
            update_player_state(self.name)
            with ready:
                ready.notify()

        print(f"Thread {self.name} stopped")

    def terminate(self):
        self.process.terminate()


# Global variables
players = ["spotify", "chromium", "firefox"]
player_states = { players[i]:PlayerState(players[i]) for i in range(len(players)) } 


def playerctl_send_command(player, command):
    return subprocess.run(
        ["playerctl", "-p", player] + command.split(" "),
        stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True
    ).stdout.strip()


def playerctl_get_status(player):
    match playerctl_send_command(player, "status"):
        case "Playing":
            return PlayerStatus.Playing
        case "Paused":
            return PlayerStatus.Paused
        case _:
            return PlayerStatus.Inactive


def playerctl_get_metadata_field(player, field):
    return playerctl_send_command(player, f"metadata {field}")


# Updates values in the PlayerState of the corresponding player
def update_player_state(player):
    state = player_states[player]

    state.status = playerctl_get_status(player)
    
    if state.status != PlayerStatus.Inactive:
        state.title  = playerctl_get_metadata_field(player, "title")
        state.artist = playerctl_get_metadata_field(player, "artist")
    else:
        state.title  = None
        state.artist = None


# Updates the player_state variable in Eww using a JSON format
def update_eww(state):
    subprocess.run([
        "eww",
        "update",
        f"player_state={json.dumps(state.export())}"
    ])


# Script entry point
if __name__ == "__main__":
    ready = threading.Condition()
    player_threads = []
    suspend = False

    # Processes signals to kill threads before exiting the program
    def exit_gracefully(signal, frame):
        for thread in player_threads:
            thread.terminate()
            thread.join()
        # Resets eww player status state before exiting
        update_eww(fallback_state)
        exit(0)

    signal.signal(signal.SIGTERM, exit_gracefully)
    signal.signal(signal.SIGINT, exit_gracefully)

    # Starts thread for each player
    for player in players:
        pt = PlayerThread(player, ready)
        pt.start()
        player_threads.append(pt)

    # Waits for the player threads to update its respectives PlayerState objects
    # and updates the variables used by eww
    fallback_state = PlayerState("none", status=PlayerStatus.Inactive)
    while not suspend:
        with ready:
            ready.wait()

            # Initializes state with fallback variable
            state_to_use = fallback_state

            # Iterates over list of PlayerStates, which are already ordered from
            # highest to lowest priority and selects the first one that is active
            for state in list(player_states.values()):
                if state.is_active():
                    state_to_use = state
                    break;
            update_eww(state_to_use)

